AWSTemplateFormatVersion: '2010-09-09'
Description: 'Code pipeline to build the tenants-db Stack'

Parameters:
  
  Environment:
    Type: String
    Description: The environment that the pipeline is deployed to
    Default: sbx
    AllowedValues:
      - prd
      - tst
      - dev
      - stg
      - sbx
      - int
    
  StackPrefix:
    Type: String
    Description: The unique prefix following the environment name that the pipleine is deployed to
  
  GitHubOwner:
    Type: String
    Description: The owner of the GitHub repository
    
  GitHubRepo:
    Type: String
    Description: The GitHub repository.
    
  GitHubBranch:
    Type: String
    Description: The github branch
    Default: master

  Component:
    Type: String
    Description: component
    Default: db
  
  IncludeIAMRole:
    Type: String
    Description: Flag to create single account IAM Role
    Default: false
    AllowedValues:
      - true
      - false

  BuildEcsImages:
    Type: String
    Description: Build the ecs images
    Default: false
    AllowedValues:
      - true
      - false

  IncludeContainerBuildAction:
    Type: String
    Description: Flag to have container build stage in pipeline
    Default: false
    AllowedValues:
      - true
      - false

Conditions:
  IsIncludeContainerBuildActionEnabled: !Equals [!Ref IncludeContainerBuildAction, true]

Resources:
  GitWebhook:
    Type: AWS::CodePipeline::Webhook
    Properties:
      Name: !Sub ${Environment}-${StackPrefix}-${Component}-wh
      Authentication: GITHUB_HMAC
      AuthenticationConfiguration:
        SecretToken: !Sub '{{resolve:secretsmanager:${Environment}-org-api-sk-pat-code}}'
      TargetPipeline: !Ref CodePipeline
      TargetPipelineVersion: 1
      TargetAction: authorisation
      Filters:
        - JsonPath: '$.ref'
          MatchEquals: !Sub refs/heads/${GitHubBranch}
      RegisterWithThirdParty: true
  
  ArtifactsStore:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: Private
      VersioningConfiguration:
        Status: Enabled
      BucketName: !Sub ${Environment}-${StackPrefix}-${Component}-s3-artifacts

  CodePipelineRole:
    Type: AWS::IAM::Role
    DependsOn: ArtifactsStore
    Properties:
      RoleName: !Sub ${Environment}-${StackPrefix}-${Component}-codepipeline-rol
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - 'codepipeline.amazonaws.com'
          Action:
          - 'sts:AssumeRole'
      Path: '/'
      Policies:
      - PolicyName: Permissions
        PolicyDocument:
          Version: '2012-10-17'      
          Statement:
          - Effect: Allow
            Action: 
            - codebuild:StartBuild
            - codebuild:BatchGetBuilds
            - cloudformation:CreateChangeSet
            - cloudformation:DescribeStacks
            - cloudformation:CreateStack
            - cloudformation:UpdateStack
            - cloudformation:SetStackPolicy
            - iam:PassRole
            Resource: "*"
          - Effect: Allow
            Action:
            - s3:GetObject
            - s3:GetObjectVersion
            - s3:GetBucketVersioning
            - s3:PutObject
            Resource: 
              !Join
                - ''
                - - !GetAtt ArtifactsStore.Arn
                  - "/*"

  CloudFormationRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${Environment}-${StackPrefix}-${Component}-cloudformation-rol
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - cloudformation.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
      - PolicyName: !Sub ${Environment}-${StackPrefix}-${Component}-cloudformation-role-pol
        PolicyDocument:
          Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action:
                - apigateway:GET
                - apigateway:DELETE
                - apigateway:PATCH
                - apigateway:POST
                - apigateway:PUT
                - cloudformation:CreateChangeSet
                - codedeploy:CreateApplication
                - codedeploy:CreateDeployment
                - codedeploy:CreateDeploymentGroup 
                - codedeploy:DeleteApplication
                - codedeploy:DeleteDeploymentGroup
                - codedeploy:GetDeployment 
                - codedeploy:GetDeploymentConfig
                - codedeploy:RegisterApplicationRevision
                - cognito-idp:CreateUserPool
                - cognito-idp:CreateUserPoolClient
                - cognito-idp:DeleteUserPool
                - cognito-idp:DeleteUserPoolClient
                - iam:CreateRole
                - iam:GetRole
                - iam:GetRolePolicy
                - iam:AttachRolePolicy
                - iam:DetachRolePolicy
                - iam:DeleteRolePolicy
                - iam:DeleteRole
                - iam:PassRole
                - iam:PutRolePolicy
                - iam:GetPolicy
                - iam:GetPolicyVersion
                - iam:TagRole
                - iam:ListRoles
                - iam:UpdateAssumeRolePolicy
                - iam:CreateServiceLinkedRole
                - iam:DeleteServiceLinkedRole
                - iam:GetServiceLinkedRoleDeletionStatus
                - lambda:AddPermission
                - lambda:CreateAlias
                - lambda:GetAlias
                - lambda:CreateFunction
                - lambda:DeleteFunction
                - lambda:DeleteAlias
                - lambda:GetFunction
                - lambda:GetFunctionConfiguration
                - lambda:InvokeFunction
                - lambda:ListTags
                - lambda:ListVersionsByFunction
                - lambda:PublishVersion
                - lambda:RemovePermission
                - lambda:CreateEventSourceMapping
                - lambda:DeleteEventSourceMapping
                - lambda:GetEventSourceMapping
                - lambda:TagResource
                - lambda:UntagResource
                - lambda:UpdateAlias
                - lambda:UpdateFunctionCode
                - lambda:UpdateFunctionConfiguration
                - s3:CreateBucket
                - s3:DeleteBucket
                - s3:DeleteBucketPolicy
                - s3:SetBucketEncryption
                - s3:GetEncryptionConfiguration
                - s3:PutEncryptionConfiguration
                - s3:PutBucketVersioning
                - s3:PutBucketPolicy
                - s3:PutBucketPublicAccessBlock
                - s3:PutBucketCORS
                - ssm:GetParameters
              Resource: "*"
            - Effect: Allow
              Action:
                - s3:PutObject
                - s3:GetBucketPolicy
                - s3:GetObject
                - s3:ListBucket
              Resource:
                - !Sub arn:aws:s3:::${Environment}-${StackPrefix}-${Component}-s3-artifacts/*
            - Effect: Allow
              Action:
                - ec2:*
              Resource: "*"
            - Effect: Allow
              Action:
                - ecs:*
              Resource: "*"
            - Effect: Allow
              Action:
                - ecr:*
              Resource: "*"
            - Effect: Allow
              Action:
                - logs:*     
              Resource: "*"
            - Effect: Allow
              Action:
                - events:PutRule
                - events:DescribeRule
                - events:RemoveTargets
                - events:PutTargets
                - events:DeleteRule
              Resource: "*"

  CodeBuildRole:
    Type: AWS::IAM::Role
    DependsOn: ArtifactsStore
    Properties:
      RoleName: !Sub ${Environment}-${StackPrefix}-${Component}-codebuild-rol
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action: ['sts:AssumeRole']
          Principal:
            Service: ['codebuild.amazonaws.com']
      Path: /
      Policies:
      - PolicyName: Permissions
        PolicyDocument:
          Version: '2012-10-17'       
          Statement:
            - Sid: "CloudWatchLogPermissions"
              Effect: "Allow"
              Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
              Resource:              
              - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/${Environment}-${StackPrefix}-${Component}-cb:*
              - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/${Environment}-${StackPrefix}-${Component}-ecs-cb:*
            - Sid: "ArtifactStorePermissions"
              Effect: "Allow"
              Action:
              - s3:PutObject
              - s3:GetObject
              - s3:GetObjectVersion
              Resource:
                !Join
                  - ''
                  - - !GetAtt ArtifactsStore.Arn
                    - "/*"
            - Sid: "DescribeStacks"
              Effect: "Allow"
              Action: cloudformation:DescribeStacks
              Resource: 
              - !Sub "arn:aws:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/${Environment}-${StackPrefix}-${Component}/*"                
            - Sid: "DescribeECR"
              Effect: "Allow"
              Action:
                - ecr:DescribeRepositories
                - ecr:GetAuthorizationToken
                - ecr:BatchCheckLayerAvailability
                - ecr:BatchGetImage
                - ecr:GetDownloadUrlForLayer
                - ecr:PutImage
                - ecr:InitiateLayerUpload
                - ecr:UploadLayerPart
                - ecr:CompleteLayerUpload
              Resource:
                - !Sub "arn:aws:ecr:${AWS::Region}:${AWS::AccountId}:repository/*"
            - Sid: "DescribeAuthECR"
              Effect: "Allow"
              Action:
                - ecr:GetAuthorizationToken
              Resource: "*"

  BuildTenantsStoreStack:
    Type: AWS::CodeBuild::Project
    DependsOn: ArtifactsStore
    Properties:
      Name:  !Sub ${Environment}-${StackPrefix}-${Component}-cb
      Description: Builds the resources required for the tenants db
      TimeoutInMinutes: 15
      ServiceRole: !Ref CodeBuildRole
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/standard:1.0
        EnvironmentVariables:
        - Name: ENVIRONMENT
          Value: !Ref Environment
        - Name: STACK_PREFIX
          Value: !Ref StackPrefix
        - Name: ARTIFACTS_BUCKET
          Value: !Select [5, !Split [":", !GetAtt ArtifactsStore.Arn]]
        - Name: INCLUDE_ROLE
          Value: !Ref IncludeIAMRole
      Source:
        BuildSpec: infrastructure/buildspec.yml
        Type: CODEPIPELINE

  BuildECSContainersStack:
    Type: AWS::CodeBuild::Project
    DependsOn: ArtifactsStore
    Properties:
      Name:  !Sub ${Environment}-${StackPrefix}-${Component}-ecs-cb
      Description: Builds all the docker images in the repo
      TimeoutInMinutes: 15
      ServiceRole: !Ref CodeBuildRole
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/standard:2.0
        PrivilegedMode: true
        EnvironmentVariables:
        - Name: ENVIRONMENT
          Value: !Ref Environment
        - Name: STACK_PREFIX
          Value: !Ref StackPrefix
        - Name: GITHUB_TOKEN
          Value: !Sub '{{resolve:secretsmanager:${Environment}-org-api-sk-pat-code}}'
        - Name: AWS_REGION
          Value: !Ref "AWS::Region"
        - Name: COMPONENT
          Value: !Ref Component
        - Name: ARTIFACTS_BUCKET
          Value: !Select [5, !Split [":", !GetAtt ArtifactsStore.Arn]]
        - Name: INCLUDE_ROLE
          Value: !Ref IncludeIAMRole
      Source:
        BuildSpec: infrastructure/buildspec_ecs.yml
        Type: CODEPIPELINE

  CodePipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      Name: !Sub ${Environment}-${StackPrefix}-${Component}-cp
      ArtifactStore:
        Location: !Ref ArtifactsStore
        Type: S3
      RoleArn: !GetAtt CodePipelineRole.Arn
      Stages:
      - Name: Source
        Actions:
        - Name: authorisation
          ActionTypeId:
            Category: Source
            Owner: ThirdParty
            Version: '1'
            Provider: GitHub
          OutputArtifacts:
            - Name: SourceArtifact
          Configuration:
            Owner: !Ref GitHubOwner
            Repo: !Ref GitHubRepo
            PollForSourceChanges: 'false'
            Branch: !Ref GitHubBranch
            OAuthToken: !Sub '{{resolve:secretsmanager:${Environment}-org-api-sk-pat-code}}'
          RunOrder: 1
      - Name: Build
        Actions:        
        - Name: build-and-package-tenants-db
          RunOrder: 1
          InputArtifacts:
            - Name: SourceArtifact
          OutputArtifacts:
            - Name: TenantsStoreStackResources
          ActionTypeId:
            Category: Build
            Owner: AWS
            Version: '1'
            Provider: CodeBuild
          Configuration:
            ProjectName: !Ref BuildTenantsStoreStack
        - !If
          - IsIncludeContainerBuildActionEnabled
          - Name: build-docker-images
            RunOrder: 1
            InputArtifacts:
              - Name: SourceArtifact
            OutputArtifacts:
              - Name: TenantsBuildDockerImages
            ActionTypeId:
              Category: Build
              Owner: AWS
              Version: '1'
              Provider: CodeBuild
            Configuration:
              ProjectName: !Ref BuildECSContainersStack
          - !Ref AWS::NoValue   
      - Name: Deploy
        Actions:
        - Name: deploy-tenants-db
          RunOrder: 1
          InputArtifacts:
            - Name: TenantsStoreStackResources
          ActionTypeId:
            Category: Deploy
            Owner: AWS
            Version: '1'
            Provider: CloudFormation
          Configuration:
            ActionMode: CREATE_UPDATE
            RoleArn: !GetAtt CloudFormationRole.Arn
            Capabilities: CAPABILITY_NAMED_IAM,CAPABILITY_AUTO_EXPAND
            StackName: !Sub ${Environment}-${StackPrefix}-${Component}
            TemplateConfiguration: TenantsStoreStackResources::configuration.json
            TemplatePath: TenantsStoreStackResources::organisation_store_stack_release.yaml    
